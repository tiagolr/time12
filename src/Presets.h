#pragma once

#include "dsp/Pattern.h"
#include <vector>
#include <string>
#include <sstream>

class Presets {
public:
	static std::vector<PPoint> getPreset(int index) {
		const auto& presets = getPresets();
		if (index < 0 || index >= static_cast<int>(presets.size()))
			return {};
		return parsePreset(presets[index]);
	}

	static std::vector<PPoint> getPaintPreset(int index) {
		const auto& presets = getPaintPresets();
		if (index < 0 || index >= static_cast<int>(presets.size()))
			return {};
		return parsePreset(presets[index]);
	}

private:
	static const std::vector<std::string>& getPaintPresets() {
		static const std::vector<std::string> presets = {
			"0 0 0 1 1 0 0 1", // empty / delete
			"0 0 0 1 1 1 0 1", // line
			"0 0 0 1 0.25 0 0 1 0.25 0.25 0 1 0.5 0.25 0 1 0.5 0.5 0 1 0.75 0.5 0 1 0.75 0.75 0 1 1 0.75 0 1 1 1 0 1", // Stairs
			"0 0 0 1 0.25 0 0 1 0.25 0.25 0 1 0.375 0.25 0 1 0.375 0 0 1 0.5 0 0 1 0.5 0.5 0 1 0.625 0.5 0 1 0.625 0 0 1 0.75 0 0 1 0.75 0.75 0 1 0.875 0.75 0 1 0.875 0 0 1 1 0 0 1 ", // Stairs 2
			"0.005 1 -0.042 3 0.995 0 0 1 ", // square
			"0.005 0 -0.25 2 0.995 1 0 1", // S-Curve
			"0 0 0.195 7 1 0.5 -0.005 1", // Smooth stairs
			"0 0 0 1 0.25 0 0 1 0.25 0.25 -0.25 1 0.5 0.25 -0.31 1 1 0.4375 0 1", // Bend
		};
		return presets;
	}

	static const std::vector<std::string>& getPresets() {
		static const std::vector<std::string> presets = {
			"", // Stutter 1
			"0 0 0 0 1 0 0 0 ", // 111 Empty
			"0 0 0 0 0.625 0.125 0 0 0.75 0 0 0 0.8125 0.0625 0 0 0.875 0 -0.176 6 1 0.09375 0 0",  // 112, Stutter 1 
			"0 0 0 0 0.5 0.25 0 0 0.625 0 0 0 0.75 0.125 0 0 1 0 0 0", // 113, Stutter 2
			"0 0 0 0 0.25 0.25 0 0 0.375 0 0 0 0.5 0.125 0 0 0.75 0 0 0 0.875 0.125 0 0 1 0 0 0 ", // 114, Stutter 3....
			"0 0 0 0 0.375 0.125 0 0 0.625 0 0 0 0.75 0.125 0 0 0.875 0.25 0 0 1 0 0 0", // 116
			"0 0 0 0 0.125 0.125 0 0 0.25 0 0 0 0.375 0.125 0 0 0.5 0 0 0 0.625 0.125 0 0 0.75 0 0 0 0.875 0.125 0 0 1 0 0 0 ", // 115,
			"0 0 0 0 0.0625 0 0.172 6 0.25 0.25 0 0 0.25 0 -0.238 6 0.5 0.21875 0 0 0.5 0 0 0 0.5625 0 0.178 6 0.75 0.25 0 0 0.75 0 0 0 0.78125 0 0.336 6 1 0.25 0 0 ", // 117,
			"0 0 0 0 0.375 0 0 1 0.5 0.25 0 0 0.5 0 0 0 0.625 0.125 0 0 0.75 0 0 0 0.875 0.125 0 0 1 0 0 0", // 118
			"0 0 0 0 0.25 0.25 0 0 0.375 0 0 0 0.4375 0.1875 0 0 0.625 0 0 0 0.875 0.125 0 0 1 0 0 0", // 119
			"0 0 0 0 0.25 0.25 0 0 0.375 0.125 0 0 0.5 0.5 0 0 0.75 0 0 0 0.875 0.125 0 0 0.9375 0.1875 0 0 0.96875 0.21875 0 0 1 0 0 0 ", // 120
			"0 0 0 0 0.125 0.125 0 0 0.1875 0.1875 0 0 0.25 0 0 0 0.375 0.125 0 0 0.4375 0.1875 0 0 0.5625 0.3125 0 0 0.6875 0.4375 0 0 0.8125 0.5625 0 0 0.875 0.25 0 0 0.9375 0 0 0 1 0 0 0 ", // 121
			"0 0 0 0 0.125 0.125 0 0 0.25 0 0 0 0.375 0.125 0 0 0.4375 0.1875 0 0 0.5625 0.0625 0 0 0.75 0 0 0 0.875 0.125 0 0 0.9375 0.4375 0 0 1 0 0 0 ", // 122

			"", // Stutter 2
		    "0 0 0 0 0.375 0 0 1 0.46875 0.25 0 0 0.5 0 0 0 0.625 0.125 0 0 0.75 0 0 0 0.875 0.125 0 0 1 0 0 0 ", // 131, Stutter 12
		    "0 0 0 0 0.3125 0 -0.21 1 0.4375 0.1875 0 0 0.625 0 0 0 0.875 0.125 0.206 6 1 0.25 0 0 ", // 132, 
		    "0 0 0 0 0.25 0.25 0 0 0.375 0.125 0 0 0.75 0 0 0 1 0 0 0", // 133, 
		    "0 0 0 0 0.0625 0.0625 0 0 0.125 0.125 0 0 0.25 0 0 0 0.3125 0.0625 0 0 0.375 0.125 0 0 0.5 0 0 0 0.5625 0.0625 0 0 0.625 0.125 0 0 0.75 0 0 0 0.8125 0.0625 0 0 0.875 0.125 0 0 1 0 0 0 ", // 134, 
		    "0 0 0 0 0.5 0.5 0 0 1 0 0 0 ", // Stairs 1
		    "0 0 0 0 0.25 0.25 0 0 0.5 0.5 0 0 0.75 0.75 0 0 1 0 0 0 ", // 136, Stairs 2
		    "0 0 0 0 0.125 0.125 -0.222 6 1 0.875 0 0 ", // 137, Stairs 3
		    "0 0 0 0 0.0625 0.0625 -0.322 6 1 0.9375 0 0 ", // 138, Stairs 4
		    "0 0 0 0 0.03125 0.03125 -0.322 0 1 0.0625 0 0", // 139, Stairs 5
		    "0 0 0 0 0.015625 0.015625 -0.65 6 1 0.984375 0 0 ", // 140, Stairs 6
		    "0 0 0 0 0.00983607 0.0102041 -0.922 6 1 0.991837 0 0 ", // 141, Stairs 7
		    "0 0 0 0 1 0 0 0", // 142, Empty

			"", // Stutter 3
			"0 0 0 0 0.5 0.125 0 0 0.75 0 0 0", // 151, Gated 1
			"0 0 0 0 0.5 0.25 0 0 0.75 0 0 0 0.875 0.25 0 0", // 152, Gated 2
			"0 0.25 0 0 0.25 0 0 0 0.5 0.5 0 0 0.75 0.25 0 0", // 152, "Shuffle 1"
			"0 0.75 0 0 0.25 0.25 0 0 0.5 0.5 0 0 0.75 0 0 0", // 152, "Shuffle 3"
			"0 0 0 0 0.25 0.25 0 0 0.3125 0.1875 0 0 0.5625 0.25 0 0 0.625 0.125 0 0 0.75 0 0 0 0.9375 0.1875 0 0 ", // 152, "Shuffle 4"
			"0 0 0 0 0.25 0.25 0 0 0.3125 0.1875 0 0 0.5625 0.25 0 0 0.625 0.125 0 0 0.75 0 0 0 0.875 0.125 0 0 ", // 152, "Shuffle 5"
			"0 0 0 0 ", // 152, "Empty"
			"0 0 0 0", // 152, "Empty"
			"0 0 0 0", // 152, "Empty"
			"0 0 0 0", // 152, "Empty"
			"0 0 0 0", // 152, "Empty"
			"0 0 0 0",

			"", // Pattern 1-12
			"0 0 0 0", // Empty
			"0 0 0 0 0.3125 0.0625 0 0 0.375 0.125 0 0 0.4375 0.1875 0 0 0.5 0 0 0", // 152, Basic 1
			"0 0 0 0 0.125 0.125 0 0 0.25 0 0 0 0.75 0 0 0 0.8125 0.0625 0 0 0.875 0.125 0 0 0.9375 0.1875 0 0", // Basic 2
			"0 0 0 0 0.4375 0.1875 0 0 0.5 0 0 0 0.5625 0.3125 0 0 0.625 0 0 0", // "Basic 3"
			"0 0 0 0 0.375 0.375 0 0 0.75 0 0 0 0.875 0.1875 0 0", // "Basic 4"
			"0 0 0 0 0.375 0.25 0 0 0.5 0 0 0 0.6875 0.4375 0 0 0.75 0.5 0 0 0.8125 0.5625 0 0 0.875 0 0 0 ", // "Basic 5"
			"0 0 0 0 0.25 0.25 0 0 0.5 0 0 0 0.75 0 -0.178 6 0.875 0.09375 0 0 0.875 0 0 0", // "Basic 6"
			"0 0 0 0 0.125 0 -0.172 6 0.25 0.09375 0 0 0.25 0 0 0 0.75 0 0 1 1 0.125 0 0", // "Basic 7"
			"0 0 0 0 0.75 0 0 1 1 0.5 0 0 ", // "Basic 8"
			"0 0 0 0 0.5 0.25 0 0 0.75 0.375 0 0 0.875 0.125 0 0 1 0.5 0 ", // Basic 9
			"0 0 0 0 0.25 0 -0.338 1 0.5 0.0625 0 0 0.5 0 0 0 1 0 0 0 ", // "Basic 10"
			"0 0 0 0 0.75 0 -0.15 6 1 0.1875 0 0", // "Basic 11"

			"", // Complex 1-12
			"0 0 0 0 0.25 0 0 0 0.28125 0.03125 0 0 0.3125 0.0625 0 0 0.375 0.125 0 0 0.4375 0 0 0 0.625 0.375 0 0 0.6875 0.4375 0 0 0.71875 0.46875 0 0 0.75 0.5 0 0 0.75 0 0 0 0.875 0.1875 0 0 1 0 0 0 ", // Complex 1
			"0 0 0 0 0.3125 0 0 1 0.375 0.125 0 0 0.375 0.0625 0 1 0.4375 0.1875 0 0 0.4375 0 0 0 0.625 0.25 0 0 0.875 0 0 1 1 0.03125 0 0 ", // Complex 2
			"0 0 0 0.1875 0.1875 0 0 0.25 0 0 0 0.4375 0.1875 0 0 0.625 0.03125 -0.172 6 0.75 0.125 0 0 0.75 0 -0.264 1 1 0.0625 0 0 ", // Complex n
			"0 0 0 0 0.25 0.25 0 0 0.4375 0.1875 0 0 0.625 0.625 0 0 0.75 0.5 0 0 0.8125 0.5625 0 0 0.84375 0.59375 0 0 0.875 0.625 0 0 0.9375 0 0 0 1 0 0 0 ", // Complex n
			"0 0 0 1 0.25 0.125 0 0 0.25 0 0 0 0.375 0.03125 0 1 0.4375 0 0 0 0.5 0.03125 0 1 0.5625 0 0 0 0.625 0.625 0 1 0.75 0.6875 0 0 0.75 0 0 0 0.8125 0.0625 0 0 0.875 0.0625 0 0 0.875 0.125 0 0 0.9375 0.125 0 0 0.9375 0.1875 0 0 1 0.1875 0 0 ", // Complex n
			"0 0 0 0 0.267213 0 0.178 6 0.3125 0.0625 0 0 0.332787 0.0632653 0.144 6 0.375 0.125 0 0 0.40625 0.15625 0 0 0.4375 0.1875 0 0 0.5 0.25 0 0 0.5625 0.3125 0 0 0.625 0 0 0 0.90625 0.03125 0 0 0.9375 0.0625 0 0 0.96875 0.09375 0 0 1 0.09375 0 0 ", // Complex n
			"0 0 0 0 0.03125 0 -0.146 2 0.125 0.125 0 0 0.15625 0.125 -0.196 2 0.25 0.25 0 0 0.25 0 0 0 0.75 0 0 0 0.78125 0 -0.106 1 1 0.125 0 0", // Complex n
			"0 0 -0.204 1 0.25 0.25 0 0 0.25 0 0 0 0.4375 0.1875 0 0 0.625 0.375 0 0 0.8125 0.5625 0 0 0.875 0.625 0 0 ", // Complex n
			"0 0 -0.204 0 0.25 0.25 0 0 0.3125 0.1875 0 0 0.375 0.0625 0 0 0.4375 0.1875 0 0 0.5 0.5 0 0 0.5625 0.3125 0 0 0.625 0.5 0 0 0.75 0.75 0 0 0.8125 0.625 0 0 0.875 0.75 0 0 0.9375 0.6875 0 0 ", // Complex n
			"0 0 -0.204 0 0.125 0.125 0 0 0.1875 0 0 0 0.3125 0.1875 0 0 0.5 0.5 0 0 0.5625 0.375 0 0 0.625 0.125 0 0 0.6875 0.6875 0 0 0.75 0.5 0 0 0.875 0.875 0 0 0.9375 0.75 0 0 0.96875 0.78125 0 0 ", // Complex n
			"0 0 -0.204 0 0.375 0.375 0 0 0.5625 0.4375 0 0 0.625 0.375 0 0 0.75 0.5 0 0 0.8125 0.625 0 0 0.84375 0.65625 0 0 0.875 0.6875 0 0 0.90625 0.71875 0 0 0.9375 0.75 0 0 0.96875 0.78125 0 0 ", // Complex n
			"0 0 -0.204 0 0.125 0.125 0 0 0.1875 0.1875 0 0 0.25 0 0 0 0.437705 0.185714 0 0 0.625205 0 0 1 0.74918 0.0625 0 0 0.74918 0 0 0 0.9375 0.6875 0 0 ", // Complex n

			"", // Chaos 1-12
			"0 0 -0.204 0 0.141053 0 0.19 6 0.186885 0.0612245 0 0 0.186885 0 0 0 0.25 0 -0.18 6 0.3125 0.046875 0 0 0.3125 0 0 0 0.453125 0 0.18 6 0.5 0.046875 0 0 0.5 0 0 0 0.5625 0 -0.18 6 0.625 0.046875 0 0 0.625 0 0 0 0.765625 0 0.234 6 0.875 0.125 0 0 0.90625 0.15625 0 0 0.9375 0.1875 0 0 0.96875 0.21875 0 0 ",
			"0 0 -0.204 0 0.25 0 0 1 0.5 0.125 0 0 0.5 0 0 1 0.625 0.25 0 0 0.625 0 0 0 0.71875 0.03125 0 0 0.75 0 0 0 0.78125 0.03125 0 0 0.8125 0 0 0 0.84375 0.03125 0 0 0.875 0 0 0 0.90625 0.03125 0 0 0.9375 0 0 0 0.96875 0.03125 0 0 ",
			"0 0 -0.204 0 0.125 0 -0.17 6 0.25 0.09375 0 0 0.25 0 0 0 0.40625 0 0.18 6 0.5 0.125 0 0 0.5 0 0 0 0.5625 0.03125 0 0 0.59375 0.0625 0 0 0.625 0 0 0 0.6875 0.03125 0 0 0.71875 0.0625 0 0 0.75 0 0 0 0.78125 0 0.236 6 1 0.09375 0 0 ",
			"0 0 0 1 0.25 0.0625 0 0 0.25 0 0 1 0.5 0.0625 0 0 0.5 0 0 1 0.5625 0.03125 0 1 0.5625 0 0 1 0.625 0.03125 0 1 0.625 0 0 1 0.6875 0.03125 0 1 0.6875 0 0 1 0.75 0.03125 0 1 0.75 0.125 0 1 0.8125 0.09375 0 1 0.8125 0.1875 0 1 0.875 0.15625 0 1 0.875 0.25 0 1 0.9375 0.21875 0 1 0.9375 0.3125 0 1 1 0.28125 0 0 ",
			"0 0 -0.256 1 0.5 0.25 0 0 0.625 0 0 0 0.8125 0 0 1 1 0.5 0 0 ",
			"0 0 -0.256 0 0.25 0.03125 0.41 4 0.5 0 0 0 0.765625 0.25 0 0 0.78125 0 0 0 0.796875 0.3125 0 0 0.8125 0.0625 0 0 0.828125 0.375 0 0 0.84375 0.125 0 0 0.859375 0.4375 0 0 0.875 0.1875 0 0 0.890625 0.5 0 0 0.90625 0.25 0 0 0.921875 0.578125 0 0 0.9375 0.3125 0 0 0.953125 0.625 0 0 0.96875 0.375 0 0 0.984375 0.6875 0 0 1 0.6875 0 0 ",
			"0 0 -0.256 0 0.3125 0 0.132 1 0.5 0.5 0 0 0.5625 0.5625 0 0 0.625 0.125 0 0 0.6875 0.6875 0 0 0.703125 0.703125 0 0 0.71875 0.71875 0 0 0.734375 0.734375 0 0 0.75 0.75 0 0 0.875 0.875 0 0 0.9375 0.875 0 0 0.953125 0.890625 0 0 0.96875 0.90625 0 0 0.984375 0.921875 0 0 1 0.9375 0 0 ",
			"0 0 -0.238 6 0.25 0.109375 0 0 0.25 0 -0.232 6 0.375 0.0625 0 0 0.375 0 0.454 1 0.5 0.125 0 0 0.625 0 -0.262 6 0.75 0.125 0 0 0.75 0 0 0 0.78125 0 0 1 0.8125 0.03125 0 0 0.8125 0 0 0 0.84375 0 0 1 0.875 0.03125 0 0 0.875 0 0 0 0.90625 0 0 1 0.9375 0.03125 0 0 0.9375 0 0 0 0.96875 0 0 1 1 0.03125 0 0 ",
			"0 0 -0.238 0 0.186066 0.188776 0 0 0.247541 0.25102 0 0 0.375205 0.373469 0 0 0.437705 0.311735 0 0 0.5 0.25 0 0 0.5625 0.1875 -0.29 6 0.765625 0 0 0 0.8125 0.0625 0 0 0.84375 0.09375 0 0 0.875 0.125 0 0 0.9375 0.1875 0 0 ",
			"0 0 -0.238 0 0.28125 0.03125 0 0 0.3125 0.0625 0 0 0.34375 0.09375 0 0 0.375 0.125 0 0 0.40625 0.15625 0 0 0.4375 0.1875 0 0 0.46875 0.21875 0 0 0.5 0 0 0 0.5625 0 -0.166 6 0.625 0.046875 0 0 0.625 0 0 0 0.78125 0 0 0 0.8125 0.015625 0 0 0.84375 0.03125 0 0 0.872131 0.0530612 0 0 0.904918 0.0755102 0 0 0.932787 0.104082 0 0 0.963934 0.144898 0 0 ",
			"0 0 -0.238 0 0.125 0.015625 0.258 4 0.1875 0 -0.27 4 0.25 0.03125 0 0 0.25 0 0 0 0.4375 0.015625 0.27 4 0.5 0 0 0 0.5625 0.03125 0.326 4 0.6875 0 0 0 0.75 0.015625 0.286 4 0.890625 0 0 0 ",
			"0 0 -0.238 0 0.25 0.1875 0 1 0.28125 0 0 1 0.28125 0.1875 0 1 0.3125 0 0 1 0.3125 0.1875 0 1 0.34375 0 0 1 0.34375 0.1875 0 1 0.375 0 0 1 0.4375 0 0 1 0.4375 0.0625 0 1 0.453125 0 0 1 0.453125 0.0625 0 1 0.46875 0 0 1 0.46875 0.0625 0 1 0.484375 0 0 1 0.484375 0.0625 0 1 0.5 0 0 1 0.5625 0.015625 0 1 0.5625 0 0 1 0.625 0.015625 0 1 0.625 0 0 1 0.6875 0.015625 0 1 0.6875 0 0 1 0.75 0.015625 0 1 0.75 0.125 0 1 0.78125 0.0625 0 1 0.78125 0.125 0 1 0.8125 0.0625 0 1 0.8125 0.125 0 1 0.84375 0.0625 0 1 0.84375 0.125 0 1 0.875 0.0625 0 1 0.875 0 0 1 ",
		};
		return presets;
	}

	static std::vector<PPoint> parsePreset(const std::string& str) {
		std::vector<PPoint> result;
		std::istringstream iss(str);
		double x, y, tension;
		int type;

		if (str.empty()) {
			return {};  // Return empty array if the string is empty
		}

		while (iss >> x >> y >> tension >> type) {
			result.emplace_back(PPoint{0, x, y, tension, type});
		}

		return result;
	}
};